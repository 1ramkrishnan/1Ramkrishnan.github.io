using System;
using System.IO;
using System.Net;
using System.Net.Sockets;
using Renci.SshNet;

class Program
{
static void Main(string[] args)
{
// Configuration
string sftpHost = “your-sftp-server.com”;
int sftpPort = 22;
string username = “your-username”;
string password = “your-password”;

```
    string proxyHost = "proxy-server.com";
    int proxyPort = 1080; // Common SOCKS proxy port
    
    string remoteFilePath = "/remote/path/to/file.txt";
    string localFilePath = @"C:\local\path\to\file.txt";
    
    try
    {
        DownloadFileViaSftpProxy(sftpHost, sftpPort, username, password, 
                               proxyHost, proxyPort, remoteFilePath, localFilePath);
        Console.WriteLine("File downloaded successfully!");
    }
    catch (Exception ex)
    {
        Console.WriteLine($"Error: {ex.Message}");
    }
    
    Console.ReadKey();
}

static void DownloadFileViaSftpProxy(string sftpHost, int sftpPort, string username, string password,
                                   string proxyHost, int proxyPort, string remoteFilePath, string localFilePath)
{
    // Create connection info with proxy
    var connectionInfo = new ConnectionInfo(sftpHost, sftpPort, username,
        ProxyTypes.Socks5, // or ProxyTypes.Socks4, ProxyTypes.Http
        proxyHost, proxyPort,
        new PasswordAuthenticationMethod(username, password));
    
    // Alternative: Create connection info without proxy authentication
    // var connectionInfo = new ConnectionInfo(sftpHost, sftpPort, username,
    //     ProxyTypes.Socks5, proxyHost, proxyPort, null, null,
    //     new PasswordAuthenticationMethod(username, password));
    
    using (var sftpClient = new SftpClient(connectionInfo))
    {
        Console.WriteLine("Connecting to SFTP server via proxy...");
        sftpClient.Connect();
        
        if (sftpClient.IsConnected)
        {
            Console.WriteLine("Connected successfully!");
            
            // Check if remote file exists
            if (sftpClient.Exists(remoteFilePath))
            {
                Console.WriteLine($"Downloading file: {remoteFilePath}");
                
                // Ensure local directory exists
                string localDir = Path.GetDirectoryName(localFilePath);
                if (!Directory.Exists(localDir))
                {
                    Directory.CreateDirectory(localDir);
                }
                
                // Download file with progress tracking
                using (var fileStream = new FileStream(localFilePath, FileMode.Create))
                {
                    var fileInfo = sftpClient.Get(remoteFilePath);
                    long totalBytes = fileInfo.Length;
                    long downloadedBytes = 0;
                    
                    sftpClient.DownloadFile(remoteFilePath, fileStream, (bytes) =>
                    {
                        downloadedBytes = bytes;
                        double progress = (double)downloadedBytes / totalBytes * 100;
                        Console.Write($"\rProgress: {progress:F1}%");
                    });
                }
                
                Console.WriteLine($"\nFile downloaded to: {localFilePath}");
            }
            else
            {
                throw new FileNotFoundException($"Remote file not found: {remoteFilePath}");
            }
        }
        else
        {
            throw new Exception("Failed to connect to SFTP server");
        }
    }
}
```

}

// Alternative implementation using manual proxy connection
public class SftpProxyDownloader
{
public static void DownloadWithManualProxy(string sftpHost, int sftpPort, string username, string password,
string proxyHost, int proxyPort, string remoteFilePath, string localFilePath)
{
// Create a socket connection through proxy
var tcpClient = new TcpClient();
tcpClient.Connect(proxyHost, proxyPort);

```
    var stream = tcpClient.GetStream();
    
    // SOCKS5 handshake (simplified)
    // This is a basic implementation - consider using a proper SOCKS library for production
    var handshake = new byte[] { 0x05, 0x01, 0x00 }; // SOCKS5, 1 method, no auth
    stream.Write(handshake, 0, handshake.Length);
    
    var response = new byte[2];
    stream.Read(response, 0, 2);
    
    if (response[0] != 0x05 || response[1] != 0x00)
    {
        throw new Exception("SOCKS5 handshake failed");
    }
    
    // Connect request
    var connectRequest = new List<byte> { 0x05, 0x01, 0x00, 0x03 }; // SOCKS5, connect, reserved, domain
    connectRequest.Add((byte)sftpHost.Length);
    connectRequest.AddRange(System.Text.Encoding.ASCII.GetBytes(sftpHost));
    connectRequest.AddRange(BitConverter.GetBytes((ushort)IPAddress.HostToNetworkOrder((short)sftpPort)));
    
    stream.Write(connectRequest.ToArray(), 0, connectRequest.Count);
    
    var connectResponse = new byte[10];
    stream.Read(connectResponse, 0, 10);
    
    if (connectResponse[1] != 0x00)
    {
        throw new Exception("SOCKS5 connect failed");
    }
    
    // Now use the stream for SSH connection
    var connectionInfo = new ConnectionInfo(sftpHost, sftpPort, username,
        new PasswordAuthenticationMethod(username, password));
    
    using (var sftpClient = new SftpClient(connectionInfo))
    {
        // Use the proxy stream for connection
        // Note: This approach requires more complex implementation
        // The SSH.NET library's built-in proxy support is recommended
    }
}
```

}